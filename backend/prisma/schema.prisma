generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Costs {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(255)
  total          Float
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  RevenuId       Int
  asset_id       Int?
  WithdrawalId   Int?          @unique
  tvaAmount      Float?
  recurrent      Boolean       @default(false)
  paymentMean    String        @default("CARD")
  CostCategoryId Int           @default(1)
  Revenus        Revenus       @relation(fields: [RevenuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  asset          asset?        @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Withdrawal     Withdrawal?   @relation(fields: [WithdrawalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  CostCategory   cost_category @relation(fields: [CostCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Credits {
  id               Int             @id @default(autoincrement())
  creditor         String          @db.VarChar(255)
  reason           String?         @db.VarChar(255)
  total            Float
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  RevenuId         Int
  asset_id         Int?
  WithdrawalId     Int?            @unique
  CreditCategoryId Int             @default(1)
  recurrent        Boolean         @default(false)
  Revenus          Revenus         @relation(fields: [RevenuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  asset            asset?          @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Withdrawal       Withdrawal?     @relation(fields: [WithdrawalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  CreditCategory   credit_category @relation(fields: [CreditCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CryptoCurrencies {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  price         Float
  pricePurchase Float
  priceChange   Float
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  category      String?        @db.VarChar(255)
  profit        Float?
  sold          Boolean        @default(false)
  UserId        Int?
  asset_id      Int?
  asset         asset?         @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Users         Users?         @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_crypto_currency_user")
  Transactions  Transactions[]
}

model Customers {
  id           Int            @id @default(autoincrement())
  firstName    String         @db.VarChar(255)
  lastName     String         @db.VarChar(255)
  company      String?        @db.VarChar(255)
  email        String         @db.VarChar(255)
  phone        String?        @db.VarChar(255)
  address      String?        @db.VarChar(255)
  city         String?        @db.VarChar(255)
  siret        String?        @db.VarChar(255)
  vatNumber    String?        @unique @db.VarChar(15)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  stripeId     String?        @unique
  UserId       Int?
  Users        Users?         @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_customer_user")
  Invoices     Invoices[]
  Quotations   Quotations[]
  Subscription Subscriptions?
  Payments     Payments[]
}

model InvoiceItems {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  unit        Float       @default(0)
  quantity    Float       @default(0)
  total       Float       @default(0)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  InvoiceId   Int?
  QuotationId Int?
  Invoices    Invoices?   @relation(fields: [InvoiceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Quotations  Quotations? @relation(fields: [QuotationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Invoices {
  id            Int            @id @default(autoincrement())
  firstName     String         @db.VarChar(255)
  lastName      String         @db.VarChar(255)
  company       String?        @db.VarChar(255)
  address       String?        @db.VarChar(255)
  city          String?        @db.VarChar(255)
  vatNumber     String?        @db.VarChar(15)
  paymentDate   DateTime?      @db.Timestamptz(6)
  total         Float          @default(0)
  paid          Boolean?       @default(false)
  recurrent     Boolean?       @default(false)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  CustomerId    Int
  RevenuId      Int?
  totalDue      Float          @default(0)
  tvaApplicable Boolean        @default(false)
  totalTTC      Float          @default(0)
  tvaAmount     Float          @default(0)
  uploadUrl     String?        @db.VarChar(255)
  InvoiceItems  InvoiceItems[]
  Payments      Payments[]
  Customers     Customers      @relation(fields: [CustomerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Revenus       Revenus?       @relation(fields: [RevenuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Quotations    Quotations[]
  PendingEmails PendingEmail[]
}

model Quotations {
  id            Int            @id @default(autoincrement())
  firstName     String         @db.VarChar(255)
  lastName      String         @db.VarChar(255)
  company       String?        @db.VarChar(255)
  address       String?        @db.VarChar(255)
  city          String?        @db.VarChar(255)
  vatNumber     String?        @db.VarChar(15)
  total         Float          @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  CustomerId    Int
  RevenuId      Int?
  cautionPaid   Boolean        @default(false)
  InvoiceId     Int?
  tvaApplicable Boolean        @default(false)
  totalTTC      Float          @default(0)
  tvaAmount     Float          @default(0)
  paymentDate   DateTime?      @db.Timestamptz(6)
  uploadUrl     String?        @db.VarChar(255)
  InvoiceItems  InvoiceItems[]
  Customers     Customers      @relation(fields: [CustomerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Invoices      Invoices?      @relation(fields: [InvoiceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Revenus       Revenus?       @relation(fields: [RevenuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  PendingEmails PendingEmail[]
}

model Revenus {
  id                Int            @id @default(autoincrement())
  total             Float          @default(0)
  pro               Float          @default(0)
  perso             Float          @default(0)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  taxPercentage     Float          @default(0)
  expense           Float          @default(0)
  tva_collected     Float          @default(0)
  tva_dispatched    Float          @default(0)
  tva_balance       Float          @default(0)
  recurrent_costs   Float          @default(0)
  recurrent_credits Float          @default(0)
  average_costs     Float          @default(0)
  average_credits   Float          @default(0)
  total_costs       Float          @default(0)
  total_credits     Float          @default(0)
  tax_amount        Float          @default(0)
  total_net         Float          @default(0)
  investments       Float          @default(0)
  balance           Float          @default(0)
  refund            Float          @default(0)
  UserId            Int?
  watchers          String?        @db.Text
  User              Users?         @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Costs             Costs[]
  Credits           Credits[]
  Invoices          Invoices[]
  Quotations        Quotations[]
  Transactions      Transactions[]
  Withdrawals       Withdrawal[]
}

model Transactions {
  id               Int               @id @default(autoincrement())
  buyingDate       DateTime?         @db.Timestamptz(6)
  exchange         String?           @db.VarChar(255)
  price            Float             @default(0)
  quantity         Float             @default(0)
  fees             Float             @default(0)
  total            Float             @default(0)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  CryptoCurrencyId Int?
  RevenuId         Int?
  CryptoCurrencies CryptoCurrencies? @relation(fields: [CryptoCurrencyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Revenus          Revenus?          @relation(fields: [RevenuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Users {
  id                    Int                 @id @default(autoincrement())
  password              String              @db.VarChar(255)
  email                 String              @unique @db.VarChar(255)
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  lastLogin             DateTime?
  authTicket            String?
  cryptosModuleActive   Boolean             @default(true)
  customersModuleActive Boolean             @default(true)
  revenusModuleActive   Boolean             @default(true)
  assets                asset[]
  Revenus               Revenus[]
  CryptoCurrencies      CryptoCurrencies[]
  Customers             Customers[]
  CronTasks             CronTask[]
  PendingEmails         PendingEmail[]
  investment_profile    investment_profile?
}

model asset {
  id                     Int                @id @default(autoincrement())
  name                   String             @db.VarChar(45)
  amount                 Float
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  amount_date            DateTime?
  interest_rate          Int?
  user_id                Int
  asset_type_id          Int?
  growth_last_month      Float              @default(0)
  growth_last_six_months Float              @default(0)
  growth_last_year       Float              @default(0)
  asset_type             asset_type?        @relation(fields: [asset_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_asset_asset_type")
  Users                  Users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_asset_user")
  Credits                Credits[]
  Costs                  Costs[]
  CryptoCurrencies       CryptoCurrencies[]
}

model Subscriptions {
  id             Int                @id @default(autoincrement())
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  status         SubscriptionStatus @default(DRAFT)
  amount         Float              @default(0)
  startDate      DateTime?
  endDate        DateTime?
  proratedAmount Float?
  stripeId       String             @unique
  refundId       String?            @unique
  CustomerId     Int                @unique
  Customers      Customers?         @relation(fields: [CustomerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscription_customer")
  PaymentIntents PaymentIntents[]
}

model PaymentIntents {
  id             Int                 @id @default(autoincrement())
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
  status         PaymentIntentStatus @default(DRAFT)
  amount         Float               @default(0)
  stripeId       String              @unique
  PaymentId      Int?
  SubscriptionId Int?
  Payments       Payments?           @relation(fields: [PaymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Subscriptions  Subscriptions?      @relation(fields: [SubscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Payments {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  status         PaymentStatus    @default(DRAFT)
  amount         Float            @default(0)
  billingAddress String
  billingZipCode String
  billingCity    String
  billingCountry String
  paymentTries   Int              @default(1)
  stripeRefundId String?          @unique
  stripePriceId  String?
  CustomerId     Int
  UserId         Int
  InvoiceId      Int?
  Customers      Customers?       @relation(fields: [CustomerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscription_customer")
  Invoices       Invoices?        @relation(fields: [InvoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_subscription_invoice")
  PaymentIntents PaymentIntents[]
}

model Withdrawal {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  date         DateTime
  name         String   @db.VarChar(45)
  amount       Float
  exchangeFees Float
  RevenuId     Int
  Revenus      Revenus  @relation(fields: [RevenuId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_withdrawal_revenu")
  Cost         Costs?
  Credit       Credits?
}

model PendingEmail {
  id                Int         @id @default(autoincrement())
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  recipientEmail    String      @db.VarChar(100)
  fromName          String      @db.VarChar(100)
  fromAddress       String      @db.VarChar(100)
  subject           String      @db.VarChar(100)
  bbcRecipientEmail String      @db.VarChar(100)
  content           String      @db.VarChar(400)
  sent              Boolean     @default(false)
  InvoiceId         Int?
  QuotationId       Int?
  UserId            Int?
  Invoice           Invoices?   @relation(fields: [InvoiceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Quotation         Quotations? @relation(fields: [QuotationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User              Users?      @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  CronTask          CronTask?
}

model CronTask {
  id                Int           @id @default(autoincrement())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  date              DateTime
  dateIntervalType  String        @default("month") @db.VarChar(10)
  dateIntervalValue Int           @default(1)
  active            Boolean       @default(true)
  function          String        @db.VarChar(50)
  errorMessage      String?       @db.VarChar(500)
  tryCounts         Int           @default(0)
  params            Json?
  UserId            Int?
  PendingEmailId    Int?          @unique
  User              Users?        @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  PendingEmail      PendingEmail? @relation(fields: [PendingEmailId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model asset_type {
  id                  Int      @id @default(autoincrement())
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  name                String   @db.VarChar(50)
  description         String   @db.VarChar(300)
  fixed_interest_rate Boolean  @default(true)
  interest_rate       Int?
  min_cap             Int?
  cap                 Int?
  duration            String   @default("unlimited")
  assets              asset[]
}

model cost_category {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String   @db.VarChar(50)
  icon       String?  @db.VarChar(100)
  color      String?  @db.VarChar(10)
  Costs      Costs[]
}

model credit_category {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  name       String    @db.VarChar(50)
  icon       String?   @db.VarChar(100)
  color      String?   @db.VarChar(10)
  Credits    Credits[]
}

model investment_profile {
  id                     Int      @id @default(autoincrement())
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  withholding_tax_active Boolean  @default(true)
  investment_goal        Float    @default(0.2)
  average_revenu_pro     Float    @default(0)
  average_revenu_perso   Float    @default(0)
  average_revenu_total   Float    @default(0)
  average_expense        Float    @default(0)
  average_balance        Float    @default(0)
  average_investments    Float    @default(0)
  investment_capacity    Float    @default(0)
  user_id                Int      @unique
  user                   Users    @relation(fields: [user_id], references: [id])
}

enum SubscriptionStatus {
  DRAFT
  VALIDATED
  CANCELLED
  FAILED
}

enum PaymentIntentStatus {
  DRAFT
  CAPTURED
  FAILED
  CANCELLED
}

enum PaymentStatus {
  DRAFT
  CAPTURED
  FAILED
  REFUND_REQUESTED
  REFUNDED
}
